package main

import (
	"fmt"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

// Define a WebSocket upgrader
// var upgrader = websocket.Upgrader{}
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // Allow all origins
	},
}

// Define a mutex to synchronize access to the clients map
var clientsLock sync.Mutex

// Define a map to store connected clients
var clients = make(map[*websocket.Conn]bool)

// Define a broadcast channel to send messages to all clients
var broadcast = make(chan []byte)

func main() {

	for i := 0; i < 5; i++ {
		if i%2 == 0 {
			continue
		}
		fmt.Println(i)
	}

	// http.HandleFunc("/ws", handleWebSocket)
	// go handleMessages()
	// fs := http.FileServer(http.Dir("static"))
	// http.Handle("/", fs)
	// log.Println("Server started on :8080")
	// log.Fatal(http.ListenAndServe(":8080", nil))
}

func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	// Upgrade HTTP connection to WebSocket
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("Error upgrading connection to WebSocket:", err)
		return
	}
	defer conn.Close()

	// Register the client
	clientsLock.Lock()
	clients[conn] = true
	clientsLock.Unlock()

	// Read messages from the client
	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Println("Error reading message:", err)
			break
		}
		// Broadcast the message to all clients
		broadcast <- msg
	}

	// Unregister the client
	clientsLock.Lock()
	delete(clients, conn)
	clientsLock.Unlock()
}

func handleMessages() {
	for {
		// Get the next message from the broadcast channel
		msg := <-broadcast

		// Send the message to all connected clients
		clientsLock.Lock()
		for client := range clients {
			err := client.WriteMessage(websocket.TextMessage, msg)
			if err != nil {
				log.Println("Error writing message to client:", err)
				client.Close()
				delete(clients, client)
			}
		}
		clientsLock.Unlock()
	}
}
